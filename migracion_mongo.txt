use bbdd2;

// ----------------------------------------------- PREPROCESO ----------------------------------------------- //

db.areas.aggregate([
    {
        $addFields: {
            _id: {
                $convert: {
                    input: "$_id",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        }
    },
    {
        $addFields: {
            COD_POSTAL: {
                $convert: {
                    input: "$COD_POSTAL",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            COD_DISTRITO: {
                $convert: {
                    input: "$COD_DISTRITO",
                    to: "int",
                    onError: null,
                    onNull: null
                }
            }
        }
    },
    {
        $addFields: {
            LATITUD: {
                $convert: {
                    input: "$LATITUD",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            LONGITUD: {
                $convert: {
                    input: "$LONGITUD",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            NUM_VIA: {
                $convert: {
                    input: "$NUM_VIA",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        }
    },
    {
        $addFields: {
          // Paso 1: Eliminar los caracteres `[` y `]` para facilitar el procesamiento
          CANTIDAD_POR_TIPO_JUEGO: {
            $replaceAll: {
              input: "$CANTIDAD_POR_TIPO_JUEGO",
              find: "[",
              replacement: ""
            }
          }
        }
      },
      {
        $addFields: {
            CANTIDAD_POR_TIPO_JUEGO: {
            $replaceAll: {
              input: "$CANTIDAD_POR_TIPO_JUEGO",
              find: "]",
              replacement: ""
            }
          }
        }
      },
      {
        $addFields: {
          // Paso 2: Dividir el string por "), (" para obtener cada par tipo-cantidad
          CANTIDAD_POR_TIPO_JUEGO: { $split: ["$CANTIDAD_POR_TIPO_JUEGO", "), ("] }
        }
      },
      {
        $addFields: {
          // Paso 3: Limpiar y mapear cada par "tipo-cantidad" a un objeto eliminando caracteres extra
          CANTIDAD_POR_TIPO_JUEGO: {
            $map: {
              input: "$CANTIDAD_POR_TIPO_JUEGO",
              as: "tipoCantidad",
              in: {
                $let: {
                  vars: {
                    // Dividir cada par en tipo y cantidad
                    tipoYcantidad: { $split: ["$$tipoCantidad", "', '"] }
                  },
                  in: {
                    k: { 
                      // Eliminar caracteres innecesarios de la clave (tipo de juego)
                      $trim: { input: { $arrayElemAt: ["$$tipoYcantidad", 0] }, chars: "('" }
                    },
                    v: { 
                      // Convertir el valor (cantidad) a entero despu√©s de eliminar caracteres extra
                      $toInt: { 
                        $trim: { input: { $arrayElemAt: ["$$tipoYcantidad", 1] }, chars: "') " }
                      } 
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        $addFields: {
          // Paso 4: Convertir la lista de pares clave-valor en un objeto
          CANTIDAD_POR_TIPO_JUEGO: { $arrayToObject: "$CANTIDAD_POR_TIPO_JUEGO" }
        }
      },
    {
        $out: {
            db: "bbdd2",
            coll: "areas"
        }
    }
]);

db.juegos.aggregate([
    {
        $addFields: {
            _id: {
                $convert: {
                    input: "$_id",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        }
    },
    {
        $addFields: {
            COD_DISTRITO: {
                $convert: {
                    input: "$COD_DISTRITO",
                    to: "int",
                    onError: null,
                    onNull: null
                }
            },
            COD_POSTAL: {
                $convert: {
                    input: "$COD_POSTAL",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            CONTRATO_COD: {
                $convert: {
                    input: "$CONTRATO_COD",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            LATITUD: {
                $convert: {
                    input: "$LATITUD",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            LONGITUD: {
                $convert: {
                    input: "$LONGITUD",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            MODELO: {
                $convert: {
                    input: "$MODELO",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            ACCESIBLE: {
                $convert: {
                    input: "$ACCESIBLE",
                    to: "bool",
                    onError: null,
                    onNull: null
                }
            },
            NUM_VIA: {
                $convert: {
                    input: "$NUM_VIA",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            NDP: {
                $convert: {
                    input: "$NDP",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            DIRECCION_AUX: {
                $convert: {
                    input: "$DIRECCION_AUX",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            },
            NDP_AREA: {
                $convert: {
                    input: "$NDP_AREA",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        }
    },
    {
        $out: {
            db: "bbdd2", coll: "juegos"
        }
    }
]);

db.encuestas_satisfaccion.aggregate([
    {
        $addFields: {
            AREARECREATIVAID: {
                $convert: {
                    input: "$AREARECREATIVAID",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        } 
    },
    {$out: {
        db: "bbdd2", coll:"encuestas_satisfaccion"
    }}
]);

db.incidentes_seguridad.aggregate([
    {
        $addFields: {
            AREARECREATIVAID: {
                $convert: {
                    input: "$AREARECREATIVAID",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        } 
    },
    {$out: {
        db: "bbdd2", coll:"incidentes_seguridad"
    }}
]);

db.usuarios.aggregate([
    {
        $out: {
            db: "bbdd2",
            coll: "usuarios"
        }
    }
])

db.meteo24.aggregate([
    {
        $addFields: {
            VIENTO: {
                $convert: {
                    input: "$VIENTO",
                    to: "bool",
                    onError: null,
                    onNull: null
                }
            }

        }
    },
    {
        $out: {db: "bbdd2",coll: "meteo24"}
    }
]);

db.estaciones_meteo_codigo_postal.aggregate([

    {
        $out: {db: "bbdd2",coll: "estaciones_meteo_codigo_postal"}
    }
]);

db.mantenimiento.aggregate([
    {
        $addFields: {
            JUEGOID: {
                $convert: {
                    input: "$JUEGOID",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        } 
    },
    {
        $out: {
            db: "bbdd2",
            coll: "mantenimiento"
        }
    }
]);

db.incidentes_seguridad.aggregate([
    {
        $addFields: {
            AREARECREATIVAID: {
                $convert: {
                    input: "$AREARECREATIVAID",
                    to: "string",
                    onError: null,
                    onNull: null
                }
            }
        } 
    },
    {
        $out: {
        db: "bbdd2", coll:"incidentes_seguridad"
    }}
]);

db.incidencias_usuarios.aggregate([
    {
        $addFields: {
            MANTENIMIENTOID: {
                $split: [
                    {
                        $replaceAll: {
                            input: {
                                $replaceAll: {
                                    input: {
                                        $replaceAll: {
                                            input:
                                            {
                                                $replaceAll: {
                                                    input: "$MANTENIMIENTOID",
                                                    find: " ",
                                                    replacement: ""
                                                }
                                            },
                                            find: "'",
                                            replacement: ""
                                        }
                                    },
                                    find: "]",
                                    replacement: ""
                                }
                            },
                            find: "[",
                            replacement: ""
                        }
                    }, ","]
            },
            USUARIOID: {
                $split: [
                    {
                        $replaceAll: {
                            input: {
                                $replaceAll: {
                                    input: {
                                        $replaceAll: {
                                            input:
                                            {
                                                $replaceAll: {
                                                    input: "$USUARIOID",
                                                    find: " ",
                                                    replacement: ""
                                                }
                                            },
                                            find: "'",
                                            replacement: ""
                                        }
                                    },
                                    find: "]",
                                    replacement: ""
                                }
                            },
                            find: "[",
                            replacement: ""
                        }
                    }, ","]
            }
        }
    },
    {
        $project: {
            _id: 1,
            TIPO_INCIDENCIA: 1,
            FECHA_REPORTE: 1,
            ESTADO: 1,
            USUARIOID: 1,
            MANTENIMIENTOID: 1
        }
    },
    {
        $out: { db: "bbdd2", coll: "incidencias_usuarios" }
    }
]);

// ----------------------------------------------- VALIDACION -----------------------------------------------//

db.runCommand({
    collMod: "areas", 
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Areas",
            required: ["_id", "DESC_CLASIFICACION", "COD_BARRIO", "BARRIO", "COD_DISTRITO", "DISTRITO", "ESTADO", "COORD_GIS_X", "COORD_GIS_Y", "LATITUD", "LONGITUD", "TIPO_VIA", "NOM_VIA", "NUM_VIA", "COD_POSTAL", "FECHA_INSTALACION"],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "ID del √°rea"
                },
                DESC_CLASIFICACION: {
                    bsonType: "string",
                    enum: ["AREA DE JUEGOS/ESPECIAL", "AREA DE MAYORES", "AREA INFANTIL", "CIRCUITO DEPORTIVO ELEMENTAL"],
                    description: "Descripci√≥n del tipo de √°rea recreativa"
                },
                COD_BARRIO: {
                    bsonType: "int",
                    description: "C√≥digo del barrio del √°rea"
                },
                BARRIO: {
                    bsonType: "string",
                    description: "Barrio del √°rea"
                },
                COD_DISTRITO: {
                    bsonType: "int",
                    description: "C√≥digo del distrito del √°rea"
                },
                DISTRITO: {
                    bsonType: "string",
                    description: "Distrito del √°rea"
                },
                ESTADO: {
                    bsonType: "string",
                    enum: ["OPERATIVO"],
                    description: "Estado del √°rea"
                },
                COORD_GIS_X: {
                    bsonType: "number",
                    description: "Coordenadas en el eje X del √°rea"
                },
                COORD_GIS_Y: {
                    bsonType: "number",
                    description: "Coordenadas en el eje Y del √°rea"
                },
                LATITUD: {
                    bsonType: "string",
                    description: "Latitud del √°rea"
                },
                LONGITUD: {
                    bsonType: "string",
                    description: "Longitud del √°rea"
                },
                TIPO_VIA: {
                    bsonType: "string",
                    description: "Tipo del v√≠a del √°rea"
                },
                NOM_VIA: {
                    bsonType: "string",
                    description: "Nombre de la v√≠a del √°rea"
                },
                NUM_VIA: {
                    bsonType: "string",
                    description: "N√∫mero de la v√≠a del √°rea"
                },
                COD_POSTAL: {
                    bsonType: "string",
                    description: "C√≥digo postal de la zona donde se encuentra el √°rea"
                },
                FECHA_INSTALACION: {
                    bsonType: "date",
                    description: "Fecha en la que se instal√≥ el √°rea"
                },
                TOTAL_ELEM: {
                    bsonType: "int",
                    description: "N√∫mero de juegos"
                },
                TIPO: {
                    bsonType: "string",
                    description: "Tipo de √°rea"
                },
                CAPACIDAD_MAX: {
                    bsonType: "int",
                    description: "Capacidad m√°xima"
                },
                CANTIDAD_POR_TIPO_JUEGO: {
                    bsonType: "string",
                    description: "Capacidad de juegos por tipo"
                }
            }
        }
    }
});

db.runCommand({ 
    collMod: "juegos", 
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Juegos",
            required: ["ID", "DESC_CLASIFICACION", "COD_BARRIO", "BARRIO", "COD_DISTRITO", "DISTRITO", "ESTADO", "COORD_GIS_X", "COORD_GIS_Y", "LATITUD", "LONGITUD", "TIPO_VIA", "NOM_VIA", "NUM_VIA", "COD_POSTAL", "FECHA_INSTALACION", "MODELO", "TIPO_JUEGO", "ACCESIBLE", "NDP_AREA", "INDICADOREXPOSICION","DESGASTE_ACUMULADO"],
            properties: {
                _id: {
                    bsonType: "int",
                    description: "Id del juego"
                },
                DESC_CLASIFICACION: {
                    bsonType: "string",
                    description: "Descripci√≥n del tipo de juego recreativa"
                },
                COD_BARRIO: {
                    bsonType: "int",
                    description: "C√≥digo del barrio del juego"
                },
                BARRIO: {
                    bsonType: "string",
                    description: "Barrio Del juego"
                },
                COD_DISTRITO: {
                    bsonType: "int",
                    description: "C√≥digo del distrito del juego"
                },
                DISTRITO: {
                    bsonType: "string",
                    description: "Distrito del juego"
                },
                ESTADO: {
                    bsonType: "string",
                    description: "Estado del juego"
                },
                COORD_GIS_X: {
                    bsonType: "double",
                    description: "Coordenadas en el eje X del juego"
                },
                COORD_GIS_Y: {
                    bsonType: "double",
                    description: "Coordenadas en el eje Y del juego"
                },
                LATITUD: {
                    bsonType: "string",
                    description: "Latitud del juego"
                },
                LONGITUD: {
                    bsonType: "string",
                    description: "Longitud del juego"
                },
                TIPO_VIA: {
                    bsonType: "string",
                    description: "Tipo del v√≠a del juego"
                },
                NOM_VIA: {
                    bsonType: "string",
                    description: "Nombre de la v√≠a del juego"
                },
                NUM_VIA: {
                    bsonType: "string",
                    description: "N√∫mero de la v√≠a del juego"
                },
                COD_POSTAL: {
                    bsonType: "string",
                    description: "C√≥digo postal de la zona donde se encuentra el juego"
                },
                FECHA_INSTALACION: {
                    bsonType: "date",
                    description: "Fecha en la que se instal√≥ el juego"
                },
                MODELO: {
                    bsonType: "string",
                    description: "Modelo de juego"
                },
                TIPO_JUEGO: {
                    bsonType: "string",
                    description: "Tipo de juego"
                },
                ACCESIBLE: {
                    bsonType: "bool",
                    description: "Indica si el juego es accesible"
                },
                NDP_AREA: {
                    bsonType: ["string", "int"],
                    description: "Area del juego"
                },
                INDICADOREXPOSICION: {
                    bsonType: "string",
                    enum: ["ALTO","MEDIO","BAJO"],
                    description: "Estado del juego"
                },
                DESGASTE_ACUMULADO: {  
                    bsonType: "int",
                    description: "Desgaste acumulado"
                }
            }
        }
    },
    validationLevel: "strict"
});

db.runCommand({collMod: "mantenimiento",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validation Maintenance",
            required: ["_id", "FECHA_INTERVENCION", "TIPO_INTERVENCION", "ESTADO_PREVIO", "ESTADO_POSTERIOR", "JUEGOID", "TIPO", "COMENTARIOS"],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "ID del mantenimiento",
                },
                FECHA_INTERVENCION: {
                    bsonType: "date",
                    description: "Fecha en la que se realiza√≥n la intervenci√≥n",
                },
                TIPO_INTERVENCION: {
                    bsonType: "string",
                    enum: ["CORRECTIVO", "EMERGENCIA", "PREVENTIVO"],
                    description: "Tipo de intervenci√≥n realizada"
                },
                ESTADO_PREVIO: {
                    bsonType: "string",
                    enum: ["MALO", "REGULAR", "BUENO"],
                    description: "Estado previo a la revisi√≥n"
                },
                ESTADO_POSTERIOR: {
                    bsonType: "string",
                    enum: ["MALO", "REGULAR", "BUENO"],
                    description: "Estado posterior a la revisi√≥n",
                },
                JUEGOID: {
                    bsonType: "int",
                    description: "Identificador del juego al que se le realiz√≥ el mantenimiento",
                },
                TIPO: {
                    bsonType: "string",
                    description: "Tipo de mantenimiento",
                },
                COMENTARIOS: {
                    bsonType: "string",
                    description: "Comentario realizado sobre el mantimiento",
                },
            }
        }
    }
});


db.runCommand({collMod: "encuestas_satisfaccion",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "encuestas_satisfaction_validation",
            required: ["_id", "PUNTUACION_ACCESIBILIDAD", "PUNTUACION_CALIDAD", "COMENTARIOS", "FECHA", "AREARECREATIVAID"],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "ID de la encuesta"
                },
                PUNTUACION_ACCESIBILIDAD: {
                    bsonType: "int",
                    description: "Puntuaci√≥n de la accesibilidad del area asociada a la encuesta"
                },
                PUNTUACION_CALIDAD: {
                    bsonType: "int",
                    description: "Puntuaci√≥n de la calidad del area asociada a la encuesta"
                },
                COMENTARIOS: {
                    bsonType: "string",
                    description: "Comentarios adicionales de los usuarios"
                },
                FECHA: {
                    bsonType: "date",
                    description: "Fecha de realizaci√≥n de la encuesta"
                },
                AREARECREATIVAID: {
                    bsonType: "int",
                    description: "ID del √°rea recreativa evaluada"
                }
            }
        }
    }
});

db.runCommand({
    collMod: "incidentes_seguridad", 
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Security Incidences",
            required: [
                "_id",
                "FECHA_REPORTE",
                "TIPO_INCIDENTE",
                "GRAVEDAD",
                "AREARECREATIVAID",
            ],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "ID del incidente registrado",
                },
                FECHA_REPORTE: {
                    bsonType: "date",
                    description:"Fecha en la que se realiz√≥ el reporte",
                },
                TIPO_INCIDENTE: {
                    bsonType: "string",
                    enum: ["ROBO","VANDALISMO","ACCIDENTE","CAIDA","DANO ESTRUCTURAL"],
                    description:"Tipo de incidente reportado",
                },
                GRAVEDAD: {
                    bsonType: "string",
                    enum: ["CRITICA", "ALTA", "MEDIA", "BAJA"],
                    description:"Nivel de gravedad del incidente",
                },
                AREARECREATIVAID: {
                    bsonType: "string",
                    description: "ID del √°rea a la que corresponde el reporte del incidente",
                },
            },
        },
    },
});

db.runCommand({ collMod: "incidencias_usuarios", 
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Users Incidences",
            required: [
                "_id",
                "TIPO_INCIDENCIA",
                "FECHA_REPORTE",
                "ESTADO",
                "USUARIOID",
                "MANTENIMIENTOID",
            ],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "N√∫mero identificativo de la fila",
                },
                TIPO_INCIDENCIA: {
                    bsonType: "string",
                    enum: ["DESGASTE", "ROTURA", "VANDALISMO", "MAL FUNCIONAMIENTO"],
                    description: "Tipo de incidencia reportada",
                },
                FECHA_REPORTE: {
                    bsonType: "date",
                    description: "Fecha en la que se report√≥ la incidencia",
                },
                ESTADO: {
                    bsonType: "string",
                    enum: ["CERRADA", "ABIERTA"],
                    description: "Estado actual de la incidencia",
                },
                USUARIOID: {
                    bsonType: ["array"],
                    description: "Listado de usuarios",
                },
                MANTENIMIENTOID: {
                    bsonType: ["array"],
                    description: "ID de mantenimiento",
                }
            },
        },
    },
});

db.runCommand({collMod: "meteo24",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Meteo",
            required: ["FECHA", "TEMPERATURA", "PRECIPITACION", "VIENTO", "DISTRITO"],
            properties: {
                FECHA: {
                    bsonType: "date",
                    description: "Fecha en la que se recoge el clima"
                },
                TEMPERATURA: {
                    bsonType: ["number", "string"],
                    description: "Temperatura"
                },
                PRECIPITACION: {
                    bsonType: ["number", "string"],
                    description: "Cantidad de precipitaci√≥n"
                },
                VIENTO: {
                    bsonType: 'bool',
                    description: "Indica si ha habido vientos fuertes"
                },
                DISTRITO: {
                    bsonType: "int",
                    description: "Area asociada"
                }
            }
        }
    }
});

db.runCommand({collMod: "usuarios",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            title: "Validator Users",
            required: ["_id", "NOMBRE", "EMAIL", "TELEFONO"],
            properties: {
                _id: {
                    bsonType: "string",
                    description: "N√∫mero NIF del usuario",
                },
                NOMBRE: {
                    bsonType: "string",
                    description: "Nombre del usuario",
                },
                EMAIL: {
                    bsonType: "string",
                    description: "Email del usuario",
                },
                TELEFONO: {
                    bsonType: "string",
                    description: "Telefono del usuario",
                },
            },
        },
    },
});

// ----------------------------------------------- AGREGADOS -----------------------------------------------

db.areas.aggregate([
    // Paso 1: Lookup para agregar juegos 
    {
        $lookup: {
            from: 'juegos',
            localField: '_id',
            foreignField: 'NDP_AREA',
            as: 'ref_juegos'
        }
    },
    // Paso 2: Lookup para agregar incidentes de seguridad
    {
        $lookup: {
            from: 'incidentes_seguridad',
            localField: '_id',
            foreignField: 'AREARECREATIVAID',
            as: 'ref_incidentes_seguridad'
        }
    },
    // Paso 3: Lookup para encuestas de satisfacci√≥n
    {
        $lookup: {
            from: 'encuestas_satisfaccion',
            localField: '_id',
            foreignField: 'AREARECREATIVAID',
            as: 'ref_encuestas_satisfaccion'
        }
    },
    // Paso 4: Lookup para estaciones meteorol√≥gicas
    {
        $lookup: {
            from: 'estaciones_meteo_codigo_postal',
            localField: 'COD_POSTAL',
            foreignField: 'Codigo Postal',
            as: 'ref_estaciones_meteo_codigo_postal'
        }
    },
    // Paso 5: Lookup para datos meteorol√≥gicos asociados
    {
        $lookup: {
            from: 'meteo24',
            localField: 'ref_estaciones_meteo_codigo_postal.C√ìDIGO',
            foreignField: 'DISTRITO',
            as: 'ref_estaciones_meteo_codigo_postal.ref_meteo'
        }
    },
    // Paso 6: Calcular m√©tricas de encuestas y mantenimiento
    {
        $addFields: {
            encuestas_accesibilidad: "$PUNTUACION_CALIDAD",
            encuestas_calidad: "$PUNTUACION_ACCESIBILIDAD"
        }
    },
    {
        $addFields: {
            nota_encuestas_area: {
                $sum: { $concatArrays: ["$encuestas_accesibilidad", "$encuestas_calidad"] }
            },
            numero_incidencias_ponderado: { $multiply: [{ $size: "$ref_incidentes_seguridad" }, 4] },
            juegos_mantenimiento: { 
                $size: { 
                    $filter: { 
                        input: { $ifNull: ["$ref_juegos", []] },  // Verificamos si ref_juegos es un array
                        as: "juego", 
                        cond: { $eq: ["$$juego.ESTADO", "EN REPARACION"] } 
                    } 
                } 
            }
        }
    },
    {
        $addFields: {
            nota_total_area: { $sum: ["$nota_encuestas_area", "$numero_incidencias_ponderado", "$juegos_mantenimiento"] }
        }
    },
    // Paso 7: Agrupar para calcular la nota m√°xima
    {
        $group: {
            _id: null,
            max_nota_global: { $max: "$nota_total_area" },
            areas: { $push: "$$ROOT" }
        }
    },
    // Paso 8: Desagregar para aplicar la nota m√°xima
    {
        $unwind: "$areas"
    },
    {
        $replaceRoot: {
            newRoot: {
                $mergeObjects: ["$areas", { max_nota: "$max_nota_global" }]
            }
        }
    },
    // Paso 9: Calcular estado global del √°rea
    {
        $addFields: {
            ESTADO_GLOBAL_AREA: {
                $round: [
                    {
                        $multiply: [
                            {
                                $divide: [
                                    { $ifNull: ["$nota_total_area", 0] },
                                    { $cond: { if: { $eq: ["$max_nota", 0] }, then: 1, else: "$max_nota" } }
                                ]
                            },
                            10
                        ]
                    },
                    2
                ]
            }
        }
    },
    {
        $addFields: {
            ESTADO_GLOBAL_AREA: { $subtract: [10, "$ESTADO_GLOBAL_AREA"] }
        }
    },
    // Paso 10: Proyecto final para incluir todos los datos relevantes
    {
        $project: {
            _id: 1,
            SISTEMA_COORD: 1,
            LATITUD: 1,
            LONGITUD: 1,
            BARRIO: 1,
            DISTRITO: 1,
            FECHA_INSTALACION: 1,
            ESTADO: 1,
            TOTAL_ELEM: 1,
            CAPACIDAD_MAX: 1,
            CANTIDAD_POR_TIPO_JUEGO: 1,
            ESTADO_GLOBAL_AREA: 1,
            ref_juegos: 1,
            ref_incidentes_seguridad: { _id: 1, GRAVEDAD: 1, FECHA_REPORTE: 1 },
            ref_encuestas_satisfaccion: { _id: 1 },
            ref_estaciones_meteo_codigo_postal: { _id: 1, ref_meteo: 1 }
        }
    },
    // Paso 11: Salida a la colecci√≥n final
    {
        $out: { db: "bbdd2", coll: "agregado_area_recreativa_clima" }
    }
]);



// --------- AGREGADO 2 ---------

db.juegos.aggregate([
    {
        $lookup: {
            from: 'mantenimiento',
            localField: '_id',
            foreignField: 'JUEGOID',
            as: 'ref_mantenimiento'
        }
    },
    {
        $lookup: {
            from: "incidencias_usuarios",
            localField: "ref_mantenimiento._id",
            foreignField: "MANTENIMIENTOID",
            as: "res_incidencias_usuarios"
        }
    },
    {
        $out: { db: "bbdd2", coll: "agregado_juego" }
    }
]);

db.agregado_juego.aggregate([
    {
        $addFields: {
            "ULTIMAFECHAMANTENIMIENTO": {
                $max: "$ref_mantenimiento.FECHA_INTERVENCION"
            },
            "res_incidencias_usuarios": {
                $map: {
                    input: "$res_incidencias_usuarios",
                    as: "ref",
                    in: {
                        _id: "$$ref._id",
                        TIPO_INCIDENCIA: "$$ref.TIPO_INCIDENCIA",
                        FECHA_REPORTE: "$$ref.FECHA_REPORTE",
                        ESTADO: "$$ref.ESTADO",
                        tiempoResolucion: {
                            $max: {
                                $map: {
                                    input: "$$ref.MANTENIMIENTOID",
                                    as: "mantenimiento_id",
                                    in: {
                                        $subtract: [
                                            {
                                                $arrayElemAt: [
                                                    {
                                                        $map: {
                                                            input: {
                                                                $filter: {
                                                                    input: "$ref_mantenimiento",
                                                                    as: "mantenimiento",
                                                                    cond: {
                                                                        $eq: [
                                                                            "$$mantenimiento._id",
                                                                            "$$mantenimiento_id"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            as: "man",
                                                            in: "$$man.FECHA_INTERVENCION"
                                                        }
                                                    },
                                                    0
                                                ]
                                            },
                                            "$$ref.FECHA_REPORTE"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    {
        // Extraer solo los IDs de ref_mantenimiento
        $addFields: {
            "ref_mantenimiento": {
                $map: {
                    input: "$ref_mantenimiento",
                    in: "$$this._id"
                }
            }
        }
    },
    {
        $out: {
            db: "bbdd2",
            coll: "agregado_juego"
        }
    }
]);


// --------- AGREGADO 3 ---------

db.incidencias_usuarios.aggregate([
    {
        $lookup: {
            from: 'usuarios',
            localField: 'USUARIOID',
            foreignField: '_id',
            as: 'emb_usuarios'
        }
    },
    {
        $addFields: {
            NIVELESCALAMIENTO: {
                $add: [
                    { $floor: { $multiply: [{ $rand: {} }, 10] } },
                    1
                ]
            }
        }
    },
    {
        $project: {
            USUARIOID: 0,
            MANTENIMIENTOID: 0
        }
    },
    {
        $out: { db: "bbdd2", coll: "agregado_incidencia" }
    }
]);
